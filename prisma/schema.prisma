generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define the Service model
model Service {
  service_id    Int        @id @default(autoincrement())
  service_name  String
  service_desc  String
  service_image String
  service_type  String
  categories    Category[]
}

// Define the Category model
model Category {
  category_id    Int     @id @default(autoincrement())
  type_Of_Repair String
  raw            Float
  tax            Float
  shipping       Float
  timeFrame      String
  total          Float
  service_id     Int
  labour         Int     @default(100)
  service        Service @relation(fields: [service_id], references: [service_id])

  @@index([service_id], map: "Category_service_id_fkey")
}

// Define the Brand model
model Brand {
  brand_id    Int      @id @default(autoincrement())
  brand_name  String
  brand_image String
  brand_desc  String
  series      Series[]
}

// Define the Series model
model Series {
  series_id    Int     @id @default(autoincrement())
  series_name  String
  series_image String
  series_desc  String
  brand_id     Int
  model        Model[]
  brand        Brand   @relation(fields: [brand_id], references: [brand_id])

  @@index([brand_id], map: "Series_brand_id_fkey")
}

// Define the Model model
model Model {
  model_id       Int             @id @default(autoincrement())
  model_name     String
  model_image    String
  series_id      Int
  series         Series          @relation(fields: [series_id], references: [series_id])
  modelCategorys ModelCategory[]

  @@index([series_id], map: "Model_series_id_fkey")
}

// Define the ModelCategory model
model ModelCategory {
  modelCategory_id Int    @id @default(autoincrement())
  type_of_repair   String
  raw              Float
  tax              Float
  shipping         Float
  timeFrame        String
  total            Float
  model_id         Int
  model            Model  @relation(fields: [model_id], references: [model_id])

  @@index([model_id], map: "ModelCategory_model_id_fkey")
}

// Define the Staff model
model Staff {
  staff_id      Int    @id @default(autoincrement())
  staff_name    String
  mobile_number String
  email         String
}

// Define the InventoryItem model
model InventoryItem {
  inventoryItemId    Int                @id @default(autoincrement())
  name               String
  description        String?
  sku                String             @unique
  stock              Int
  cost               Float
  itemsCategoryId    Int
  itemsSubCategoryId Int?
  vendorId           Int?
  locationId         Int?
  itemsCategory      ItemsCategory      @relation(fields: [itemsCategoryId], references: [itemsCategoryId])
  itemsSubCategory   ItemsSubCategory?  @relation(fields: [itemsSubCategoryId], references: [itemsSubCategoryId])
  vendor             Vendor?            @relation(fields: [vendorId], references: [vendorId])
  location           Location?          @relation(fields: [locationId], references: [locationId])
  variations         Variation[]
  sales              Sale[]
  stockReturns       StockReturn[]
  internalTransfers  InternalTransfer[]
  inventoryAge       InventoryAge[] 
  lowStockAlerts     LowStockAlert[] 
}

// Define the ItemsCategory model (formerly MainCategory)
model ItemsCategory {
  itemsCategoryId Int             @id @default(autoincrement())
  name            String
  items           InventoryItem[]
}

// Define the ItemsSubCategory model (formerly SubCategory)
model ItemsSubCategory {
  itemsSubCategoryId Int             @id @default(autoincrement())
  name               String
  items              InventoryItem[]
}

// Define the Vendor model
model Vendor {
  vendorId Int             @id @default(autoincrement())
  name     String
  items    InventoryItem[]
}

// Define the Location model
model Location {
  locationId    Int                @id @default(autoincrement())
  name          String
  description   String?
  items         InventoryItem[]
  transfersTo   InternalTransfer[] @relation("toLocation")
  transfersFrom InternalTransfer[] @relation("fromLocation")
}

// Define the Variation model
model Variation {
  variationId     Int           @id @default(autoincrement())
  sku             String        @unique
  inventoryItemId Int
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [inventoryItemId])
}

// Define the StockReturn model
model StockReturn {
  stockReturnId   Int           @id @default(autoincrement())
  inventoryItemId Int
  quantity        Int
  reason          String
  returnedAt      DateTime
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [inventoryItemId])
}

// Define the InternalTransfer model
model InternalTransfer {
  internalTransferId Int           @id @default(autoincrement())
  inventoryItemId    Int
  quantity           Int
  fromLocationId     Int
  toLocationId       Int
  fromLocation       Location      @relation("fromLocation", fields: [fromLocationId], references: [locationId])
  toLocation         Location      @relation("toLocation", fields: [toLocationId], references: [locationId])
  inventoryItem      InventoryItem @relation(fields: [inventoryItemId], references: [inventoryItemId])
}

// Define the Sale model
model Sale {
  saleId          Int           @id @default(autoincrement())
  inventoryItemId Int
  quantity        Int
  revenue         Float
  saleDate        DateTime
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [inventoryItemId])
}

// Define the InventoryAge model
model InventoryAge {
  inventoryAgeId  Int           @id @default(autoincrement())
  inventoryItemId Int
  arrivalDate     DateTime
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [inventoryItemId])
}

// Define the LowStockAlert model
model LowStockAlert {
  lowStockAlertId Int           @id @default(autoincrement())
  inventoryItemId Int
  threshold       Int
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [inventoryItemId])
}


